int iStep = 0, iNoStep = 0;
				// fixing zero position
				for(int x=1;x<=iDimension;x++){
					for(int y=iDimension-1;y>=0;y--){
						if (y-1 >= 0 && arrDimension[y-1][i] == 0 && arrDimension[y][i] != 0){
							arrDimension[y-1][i] = arrDimension[y][i];
							arrDimension[y][i] = 0;
						}
					}
				}
				
				for(int j=iDimension-1;j>=0;j--){
					if (j-1 >= 0 && arrDimension[j-1][i] != arrDimension[j][i] && (arrDimension[j-1][i] != 0 && arrDimension[j][i] != 0)){
						if (j+1 < iDimension && arrDimension[j+1][i] == arrDimension[j][i]){
							arrDimension[j][i] += arrDimension[j][i];
							arrDimension[j+1][i] = 0;
							iStep++;
						}
					}
					
					if (j == 0 && arrDimension[j][i] == arrDimension[j+1][i] && iStep == 0){
						arrDimension[j][i] += arrDimension[j+1][i];
						arrDimension[j+1][i] = 0;
						iStep++;
						System.out.println("in here" + iStep);
					}									
					
					if (j == 0 && iStep == 0){
						iNoStep++;
					}
				}
				
				// re-fixing zero position
				for(int x=1;x<=iDimension;x++){
					for(int y=iDimension-1;y>=0;y--){
						if (y-1 >= 0 && arrDimension[y-1][i] == 0 && arrDimension[y][i] != 0){
							arrDimension[y-1][i] = arrDimension[y][i];
							arrDimension[y][i] = 0;
						}
					}
				}
				
				if (iNoStep > 0) return false;
